generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Entity {
  id           String      @id @default(uuid())
  entityName   String      @unique
  entityNote   String?
  active       Boolean     @default(true)
  contactName  String?
  contactEmail String?
  contactPhone String?
  address      String?
  city         String?
  state        String?
  zip          String?
  equipment    Equipment[]
  properties   Property[]
}

model Property {
  id           String      @id @default(uuid())
  entityId     String
  propertyName String      @unique
  propertyNote String?     @db.Text
  active       Boolean     @default(true)
  contactName  String?
  contactEmail String?
  contactPhone String?
  address      String?
  city         String?
  state        String?
  zip          String?
  buildings    Building[]
  equipment    Equipment[]
  entity       Entity      @relation(fields: [entityId], references: [id], onUpdate: NoAction)
  units        Unit[]
}

model Building {
  id             String      @id @default(uuid())
  propertyId     String
  buildingNumber String?
  buildingNote   String?     @db.Text
  active         Boolean     @default(true)
  property       Property    @relation(fields: [propertyId], references: [id], onUpdate: NoAction)
  equipment      Equipment[]
  units          Unit[]

    @@unique([propertyId, buildingNumber])
}

model Unit {
  id           String      @id @default(uuid())
  propertyId   String
  buildingId   String
  unitNumber   String?
  unitNote     String?     @db.Text
  active       Boolean     @default(true)
  contactName  String?
  contactEmail String?
  contactPhone String?
  address      String?
  city         String?
  state        String?
  zip          String?
  equipment    Equipment[]
  building     Building    @relation(fields: [buildingId], references: [id], onUpdate: NoAction)
  property     Property    @relation(fields: [propertyId], references: [id], onUpdate: NoAction)

    @@unique([propertyId, buildingId, unitNumber])
}

model EquipmentType {
  id                String      @id @default(uuid())
  equipmentTypeName String      @unique
  equipmentTypeNote String?     @db.Text
  active            Boolean     @default(true)
  equipment         Equipment[]
}

model Manufacturer {
  id               String      @id @default(uuid())
  manufacturerName String      @unique
  active           Boolean     @default(true)
  equipment        Equipment[]
}

model Equipment {
  id                String         @id @default(uuid())
  entityId          String
  propertyId        String
  buildingId        String
  unitId            String
  equipmentTypeId   String
  manufacturerId    String
  purchaseDate      DateTime
  purchasePrice     Float
  purchasedFrom     String
  modelNumber       String
  serialNumber      String
  warrantyDate      DateTime
  active            Boolean        @default(true)
  equipmentStatusId Int            @default(1)
  equipmentNote     String?        @db.Text
  building          Building       @relation(fields: [buildingId], references: [id], onUpdate: NoAction)
  entity            Entity         @relation(fields: [entityId], references: [id], onUpdate: NoAction)
  equipmentStatus   EqipmentStatus @relation(fields: [equipmentStatusId], references: [id], onUpdate: NoAction)
  equipmentType     EquipmentType  @relation(fields: [equipmentTypeId], references: [id], onUpdate: NoAction)
  manufacturer      Manufacturer   @relation(fields: [manufacturerId], references: [id], onUpdate: NoAction)
  property          Property       @relation(fields: [propertyId], references: [id], onUpdate: NoAction)
  unit              Unit           @relation(fields: [unitId], references: [id], onUpdate: NoAction)
}

model EqipmentStatus {
  id        Int         @id
  status    String      @unique
  equipment Equipment[]
}
